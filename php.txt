// 陣列
// 自動編號(key), 自己編順序也可以, 但是順序要正確
$arrayName[] = 'A';
$arrayName[] = 'B';
$arrayName[] = 'C';
$arrayName[] = 'D';

// 以下可以輸出陣列
for ($i = 0; $i <= 3; $i++){
    echo $arrayName[$i] . "<br>";
}

var_dump($arrayName);

print_r($arrayName);

// 手動編號(key)
$myArray['name'] = "Jimmy";
$myArray['height'] = 170;
$myArray['weight'] = 80;
echo $myArray['weight'];
point : $myArray['name'] != $myArray[0]

// 比較好的寫法
$myArray = array(
    'name' => 'Jimmy',
    'height' => 170,
    'weight' => 80
);

// 針對手動編號的陣列, foreach可以更有效的顯示各項
foreach ($myArray as $key => $value){
    echo $key . $value;
}

// 自動編號和手動編號可以混用, 但是建議不要
$x = array("xxx" , "a1" => "yyy")

// 手動編號不要用小數點
$x = array(
    0.1 => "A";
    0.9 => "B"
);
echo $x[0] --> B

// 排序
$x = array("A1", "A2", "A18");
sort($x);
--> $x = sort($x), sort會是把原本的位置覆蓋掉
--> A1, A18, A2, 是以字串做排序

natsort($x);
--> A1, A2, A18, 字串中有數字會用數字做排序

function cmp ($a, $b){
    return $b - $a;
}
usort($x, "cmp");
--> 用自己規定的方法做排序
--> function可以用變數呼叫, 更可以用字串直接呼叫

// 存取本地檔案位置
__FILE__  : 完整的本地位置
dirname ( __FILE__ ) : 檔案所在的資料夾位置
basename ( __FILE__ ) : 檔名
filesize ( __FILE__ ) : 檔案大小

// 讀檔
$fileDir = dirname ( __FILE__ )
--> 先找位置資料夾

$fileResource = opendir ( $fileDir )
--> 開啟資料夾

$item = readdir($fileResource)
--> 閱讀資料夾

closedir($fileResource)
--> 關閉資料夾

// html mix php
// 原本
<ul>
    <?php 
        for ($i = 1; $i <= 3; $i++) { 
            echo "<li>$i</li>";
        } 
    ?>
</ul>

// 修改
<ul>
    <?php for ($i = 1; $i <= 3; $i++) { ?>
        <li><?= $i ?></li>
    <?php } ?>
</ul>

// html中標籤屬性裡面也可以加上php的程式碼, 針對不同情況上下沒有一定比較好的
// 原本
<ul>
    <?php foreach ($scoreList as $score) { ?>
        <?php if ($score < 60) { ?>
            <li class="fail"><?= $score ?></li>
        <?php }else{ ?>
            <li class="pass"><?= $score ?></li>
        <?php } ?>
    <?php } ?>
</ul>

// 修改
<ul>
    <?php foreach ($scoreList as $score) { ?>
        <li class=" <?= ( ($score >= 60)? "pass" : "fail" ) ?> "><?= $score ?></li>
    <?php } ?>
</ul>

// 送檔案
送出去的檔案會是陣列格式!!!
move_uploaded_file ( $objFile ["tmp_name"], "./" . $objFile ["name"] ) --> 將暫時的資料移至目的地
point : html中的input, type必須是file --> <input type="file" name="file1">
        form則是要有enctype="multipart/form-data"

// 範例
<?php
    if(isset($_POST["btnOK"])){
        processFile ( $_FILES ["file1"] );
    }
    function processFile($objFile) {
        if ($objFile ["error"] != 0) {
            echo "Upload Fail! ";
            echo "<a href='javascript:window.history.back();'>Back</a>";
            return;
        }
        
        $test = move_uploaded_file ( $objFile ["tmp_name"], "./" . $objFile ["name"] );
        if (! $test) {
            die ( "move_uploaded_file() faile" );
        }
        
        echo "File uploaded<br />";
        echo "File name: " . $objFile ["name"] . "<br />";
        echo "File type: " . $objFile ["type"] . "<br />";
        echo "File size: " . $objFile ["size"] . "<br />";
        
        echo "--  Done --";
        exit ();
    }
?>
<html>
    <body>
        <form enctype="multipart/form-data" method="POST" action="">
            <input type="file" name="file1">
            <input type="submit" name="btnOK">
        </form>
    </body>
</html>

// 讀檔案

file("要讀取的url") --> 讀出來會是陣列格式(例如 : txt檔每一次換行都是一個項目)
htmlspecialchars ( $line ) --> 檔案中所有的html格式都會變成文字, 而不是執行html格式, 資安問題
// 範例
<?php
header("content-type: text/html; charset=utf-8");

$lines = file ( 'data.txt' );
foreach ( $lines as $line_num => $line ) {
	echo "#<i>$line_num</i> : " . 
		 htmlspecialchars ( $line ) . "<br />\n";
}

?>

file_get_contents('要讀取的url') --> 讀出來的會是字串
// 範例
<?php
	$contents = file_get_contents('data.txt');
	echo (str_replace("\r\n", "<br />", $contents));
?>

file_put_contents("要寫入的url", $content) --> 寫入檔案
// 範例
<?php
$content = <<<fileContent
PHP基本語法重點整理、
自訂函式寫作注意事項、
陣列與相關函式、
jQuery Mobile整合運用
fileContent;

$fileSize = file_put_contents("data2.txt", $content);
echo "File size: $fileSize <br />-- Done --";
?>

// 將讀寫資料夾寫在一起(二元檔案)
fopen(開啟) --> fgets(讀取) --> fclose(關閉)
while (!feof($f)) --> 在檔案結尾處前
// 範例
<?php
header("content-type: text/html; charset=utf-8");
 
$sData = "";
$f = fopen("data.txt", "r");
while (!feof($f))
{
	$line = fgets($f);
	$sData .= Trim($line) . "<br>";
}
fclose($f);
echo $sData;

?>

// 將讀寫資料夾寫在一起(非二元檔案)
fopen(開啟) --> fread(讀取) --> fclose(關閉)
<?php
header("Content-Type: image/png");

$filename = "cc.png";
$fileHandle = fopen($filename, "rb");
echo fread($fileHandle, filesize($filename));
fclose($filename);

?>

// 遷入html
<img src="xx.php">

// 箭頭????
Client ----> Server

// 類別Class
// 裡面的東西都要加上public或是private, public是class外面也可以讀, private只有class裡面可以讀
// function沒有加上的一律都是public, 也可以在()設定數值
class clasName{
    public $x;
    public function funcName (){};
}

// 呼叫, 若呼叫不存在的會是空字串, 變數有分大小寫, 但是函式沒有分
$obj = new clasName();
$obj->x = 1; // 是箭頭, 不用有$
echo $obj->x;
$obj->funcName();
echo $obj->y;

// 函式呼叫的時候可以直接設定數值
$obj->funcName(10);
point : 函式裡面要用數值要打完整的, $obj->x

// 在外面新增屬性
$obj->y = 5;

// 特殊函式
// __construct : 建構式函式, 在new的當下就會執行一次
// __destruct : 當不被使用就執行一次, 在SESSION並不是歸零
// __set : 只要設定不存在的新內容的值, 就會執行一次
// __get : 只要呼叫不存在的新內容, 就會執行一次